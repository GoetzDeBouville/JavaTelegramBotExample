package org.example;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class MessageGenerator { // –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞–º–∏
    static String messageText = "this message id is "; // –ø–æ–ª–µ c –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º

    MessageGenerator(long messageId) { // –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ id —Å–æ–æ–±—â–µ–Ω–∏—è
        messageText += String.valueOf(messageId).concat(getSmileSet()); // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
    }

    MessageGenerator(String messageText, long messageId) { // –≤—Ç–æ—Ä–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω–∏—Ç–∞
        if (messageId % 2 == 0) { // –ø—Ä–æ–≤–µ—Ä—è–µ–º messageId –Ω–∞ —á—ë—Ç–Ω–æ—Å—Ç—å
            /**
             * –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ StringBuilder. –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∏ –º—ã –±—É–¥–µ–º –µ–≥–æ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –≤ Java –∏ –≤ Kotlin
             */
            StringBuilder modifiedText = new StringBuilder();
            for (int i = 0; i < messageText.length(); i++) {
                if ((i + 1) % 2 != 0) {
                    modifiedText.append(messageText.charAt(i)); // –Ω–∞ –æ–±—ä–µ–∫—Ç–µ StringBuilder –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ –∫ –∏–º–µ—é—â–µ–º—É—Å—è charSequence –Ω–æ–≤—ã—Ö char
                }
            }
            this.messageText = modifiedText.toString(); // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ messageText —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        } else {
            StringBuilder modifiedText = new StringBuilder(); // —Å–º. –≤—ã—à–µ
            for (int i = 0; i < messageText.length(); i++) {
                if ((i + 1) % 2 == 0) {
                    modifiedText.append(messageText.charAt(i));
                }
            }
            this.messageText = modifiedText.toString();
        }
        this.messageText += messageId + getSmileSet(); // –∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ messageText –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º messageId –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ—Ç–æ–¥–∞ getSmileSet()
    }

    public static String getMessage() {
        return messageText;
    }

    private static String getRandomSmile() {  // –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–º–∞–π–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏
        /**
         * –°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é ArrayList. –¢–æ –µ—Å—Ç—å —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å ArrayList –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–µ–º
         * –≤ –µ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–æ–≤.
         */
        ArrayList<String> smiles = new ArrayList<>(Arrays.asList("‚úÖ", "üòÅ", "‚ù§", "üåü", "üéâ", "üçï", "üéà", "üî•", "‚ùå", "ü•≥", "üèÑüèª‚Äç‚ôÇÔ∏è", "ü§ñ"));
        /**
         * –î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞ –æ–±—Ä–∞—Ç–∏–º—Å—è –∫ –∫–ª–∞—Å—Å—É Random, –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–º –µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –Ω–∞ –µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
         * –≤—ã–∑–æ–≤–∏–º –º–µ—Ç–æ–¥ nextInt.
         * –ö—Å—Ç–∞—Ç–∏, –∫–ª–∞—Å—Å Random —Ç–æ–∂–µ –∏–º–µ–µ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:  public Random(long seed)
         */
        Random random = new Random();
        /**
         * —Å –ø–æ–º–æ—â—å—é —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Random —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
         * –º–µ—Ç–æ–¥ nextInt –ø—Ä–∏–Ω–º–∏–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≥—Ä–∞–Ω–∏—Ü—É –≤–µ—Ä—Ö–Ω–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª (–ø–µ—Ä–µ–¥–∞–¥–∏–º –≤ –Ω–µ–≥–æ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ smiles)
         * –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç (smiles.length())
         */
        int randomIndex = random.nextInt(smiles.size());

        /**
         * –í–µ—Ä–Ω–µ–º —ç–º–æ–¥–∑–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å—É randomIndex
         */
        return smiles.get(randomIndex);
    }

    private static String getSmileSet() { // —ç—Ç–æ—Ç –º–µ—Ç–æ–∂ –≤–µ—Ä–Ω–µ—Ç –Ω–∞–º –Ω–∞–±–æ—Ä —Å–º–∞–π–ª–æ–≤
        Random repetitionNum = new Random(); // —Å–º. –ø—Ä–æ –∫–ª–∞—Å—Å Random –≤—ã—à–µ
        StringBuilder smileSet = new StringBuilder(); // —Å–º. –ø—Ä–æ –∫–ª–∞—Å—Å Random –≤—ã—à–µ
        for (int i = 0; i <= repetitionNum.nextInt(10); i++) { // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Å–º–∞–π–ª–æ–≤ –≤ —Ü–∏–∫–ª–µ
            smileSet.append(getRandomSmile());
        }
        return smileSet.toString();
    }
}
